{"version":3,"file":"static/webpack/static/development/pages/_app.js.412c7cb55cbc269bb4c1.hot-update.js","sources":["webpack:///./components/Search.js"],"sourcesContent":["import React from 'react';\nimport Downshift from 'downshift';\nimport Router from 'next/router';\nimport { ApolloConsumer } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport debounce from 'lodash.debounce';\nimport { DropDown, DropDownItem, SearchStyles } from './styles/DropDown';\n\nconst SEARCH_ITEMS_QUERY = gql`\n  query SEARCH_ITEMS_QUERY($searchTerm: String!) {\n    items(\n      where: {\n        OR: [\n          { title_contains: $searchTerm }\n          { description_contains: $searchTerm }\n        ]\n      }\n    ) {\n      id\n      image\n      title\n    }\n  }\n`;\n\nclass AutoComplete extends React.Component {\n  state = { items: [], loading: false };\n  onChange = debounce(async (e, client) => {\n    this.setState({ loading: true });\n    const res = await client.query({\n      query: SEARCH_ITEMS_QUERY,\n      variables: { searchTerm: e.target.value }\n    });\n    this.setState({ items: res.data.items, loading: false });\n  }, 300);\n  render() {\n    return (\n      <SearchStyles>\n        <Downshift>\n          {({\n            getInputProps,\n            getItemProps,\n            isOpen,\n            inputValue,\n            highlightedIndex\n          }) => (\n            <div>\n              <ApolloConsumer>\n                {client => (\n                  <input\n                    {...getInputProps({\n                      type: 'search',\n                      placeholder: 'Search for an item',\n                      id: 'Search',\n                      className: this.state.loading ? 'loading' : '',\n                      onChange: e => {\n                        e.persist();\n                        this.onChange(e, client);\n                      }\n                    })}\n                  />\n                )}\n              </ApolloConsumer>\n              {isOpen && (\n                <DropDown>\n                  {this.state.items.map((item, index) => (\n                    <DropDownItem\n                      key={item.id}\n                      highlighted={index === highlightedIndex}\n                    >\n                      <img src={item.image} width={50} alt={item.title} />\n                      {item.title}\n                    </DropDownItem>\n                  ))}\n                </DropDown>\n              )}\n            </div>\n          )}\n        </Downshift>\n      </SearchStyles>\n    );\n  }\n}\n\nexport default AutoComplete;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAgBA;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAFA;AAAA;AAGA;AACA;AAAA;AAAA;AAFA;AACA;AAHA;AAEA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;;;;;;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AARA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AA1BA;AA0CA;;;;AAxDA;AACA;AA0DA;;;;A","sourceRoot":""}